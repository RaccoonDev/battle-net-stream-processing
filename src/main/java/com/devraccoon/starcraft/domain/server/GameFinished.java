/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.devraccoon.starcraft.domain.server;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GameFinished extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1617818976536548787L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GameFinished\",\"namespace\":\"com.devraccoon.starcraft.domain.server\",\"fields\":[{\"name\":\"eventTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"gameId\",\"type\":{\"type\":\"string\",\"logicalType\":\"UUID\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<GameFinished> ENCODER =
      new BinaryMessageEncoder<GameFinished>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GameFinished> DECODER =
      new BinaryMessageDecoder<GameFinished>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GameFinished> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GameFinished> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GameFinished> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GameFinished>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GameFinished to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GameFinished from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GameFinished instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GameFinished fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.time.Instant eventTime;
  private java.lang.CharSequence gameId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GameFinished() {}

  /**
   * All-args constructor.
   * @param eventTime The new value for eventTime
   * @param gameId The new value for gameId
   */
  public GameFinished(java.time.Instant eventTime, java.lang.CharSequence gameId) {
    this.eventTime = eventTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.gameId = gameId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventTime;
    case 1: return gameId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventTime = (java.time.Instant)value$; break;
    case 1: gameId = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventTime' field.
   * @return The value of the 'eventTime' field.
   */
  public java.time.Instant getEventTime() {
    return eventTime;
  }


  /**
   * Sets the value of the 'eventTime' field.
   * @param value the value to set.
   */
  public void setEventTime(java.time.Instant value) {
    this.eventTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'gameId' field.
   * @return The value of the 'gameId' field.
   */
  public java.lang.CharSequence getGameId() {
    return gameId;
  }


  /**
   * Sets the value of the 'gameId' field.
   * @param value the value to set.
   */
  public void setGameId(java.lang.CharSequence value) {
    this.gameId = value;
  }

  /**
   * Creates a new GameFinished RecordBuilder.
   * @return A new GameFinished RecordBuilder
   */
  public static com.devraccoon.starcraft.domain.server.GameFinished.Builder newBuilder() {
    return new com.devraccoon.starcraft.domain.server.GameFinished.Builder();
  }

  /**
   * Creates a new GameFinished RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GameFinished RecordBuilder
   */
  public static com.devraccoon.starcraft.domain.server.GameFinished.Builder newBuilder(com.devraccoon.starcraft.domain.server.GameFinished.Builder other) {
    if (other == null) {
      return new com.devraccoon.starcraft.domain.server.GameFinished.Builder();
    } else {
      return new com.devraccoon.starcraft.domain.server.GameFinished.Builder(other);
    }
  }

  /**
   * Creates a new GameFinished RecordBuilder by copying an existing GameFinished instance.
   * @param other The existing instance to copy.
   * @return A new GameFinished RecordBuilder
   */
  public static com.devraccoon.starcraft.domain.server.GameFinished.Builder newBuilder(com.devraccoon.starcraft.domain.server.GameFinished other) {
    if (other == null) {
      return new com.devraccoon.starcraft.domain.server.GameFinished.Builder();
    } else {
      return new com.devraccoon.starcraft.domain.server.GameFinished.Builder(other);
    }
  }

  /**
   * RecordBuilder for GameFinished instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GameFinished>
    implements org.apache.avro.data.RecordBuilder<GameFinished> {

    private java.time.Instant eventTime;
    private java.lang.CharSequence gameId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.devraccoon.starcraft.domain.server.GameFinished.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[0].schema(), other.eventTime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.gameId)) {
        this.gameId = data().deepCopy(fields()[1].schema(), other.gameId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing GameFinished instance
     * @param other The existing instance to copy.
     */
    private Builder(com.devraccoon.starcraft.domain.server.GameFinished other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[0].schema(), other.eventTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gameId)) {
        this.gameId = data().deepCopy(fields()[1].schema(), other.gameId);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'eventTime' field.
      * @return The value.
      */
    public java.time.Instant getEventTime() {
      return eventTime;
    }


    /**
      * Sets the value of the 'eventTime' field.
      * @param value The value of 'eventTime'.
      * @return This builder.
      */
    public com.devraccoon.starcraft.domain.server.GameFinished.Builder setEventTime(java.time.Instant value) {
      validate(fields()[0], value);
      this.eventTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTime' field has been set.
      * @return True if the 'eventTime' field has been set, false otherwise.
      */
    public boolean hasEventTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventTime' field.
      * @return This builder.
      */
    public com.devraccoon.starcraft.domain.server.GameFinished.Builder clearEventTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'gameId' field.
      * @return The value.
      */
    public java.lang.CharSequence getGameId() {
      return gameId;
    }


    /**
      * Sets the value of the 'gameId' field.
      * @param value The value of 'gameId'.
      * @return This builder.
      */
    public com.devraccoon.starcraft.domain.server.GameFinished.Builder setGameId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.gameId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'gameId' field has been set.
      * @return True if the 'gameId' field has been set, false otherwise.
      */
    public boolean hasGameId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'gameId' field.
      * @return This builder.
      */
    public com.devraccoon.starcraft.domain.server.GameFinished.Builder clearGameId() {
      gameId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GameFinished build() {
      try {
        GameFinished record = new GameFinished();
        record.eventTime = fieldSetFlags()[0] ? this.eventTime : (java.time.Instant) defaultValue(fields()[0]);
        record.gameId = fieldSetFlags()[1] ? this.gameId : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GameFinished>
    WRITER$ = (org.apache.avro.io.DatumWriter<GameFinished>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GameFinished>
    READER$ = (org.apache.avro.io.DatumReader<GameFinished>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










